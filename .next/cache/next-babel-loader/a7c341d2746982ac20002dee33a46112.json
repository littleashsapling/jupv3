{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/Desktop/jupv3/jupv3/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/User/Desktop/jupv3/jupv3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/User/Desktop/jupv3/jupv3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/User/Desktop/jupv3/jupv3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { formBinderURL, binder } from \"rx-binder\";\nimport { kernels, apiVersion } from \"rx-jupyter\";\nimport * as rxJupyter from \"rx-jupyter\";\nimport * as operators from \"rxjs/operators\";\nimport { tap, map, catchError, filter } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nexport var UP = \"up\";\nexport var GETTING_UP = \"isitup\";\n\nfunction makeHost(_ref) {\n  var endpoint = _ref.endpoint,\n      token = _ref.token;\n  return {\n    type: UP,\n    config: {\n      crossDomain: true,\n      endpoint: endpoint,\n      token: token\n    }\n  };\n}\n\nexport var LocalForage = /*#__PURE__*/function () {\n  function LocalForage() {\n    _classCallCheck(this, LocalForage);\n  }\n\n  _createClass(LocalForage, [{\n    key: \"set\",\n    value: function set(key, value) {\n      localStorage.setItem(key, JSON.stringify(value));\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var default_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return JSON.parse(localStorage.getItem(key) || JSON.stringify(default_));\n    }\n  }]);\n\n  return LocalForage;\n}();\nvar prefix = \"@BinderKey@\";\nvar myBinderURL = \"https://mybinder.org\";\n\nfunction sleep(duration) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, duration);\n  });\n}\n\nexport var LocalHostStorage = /*#__PURE__*/function () {\n  function LocalHostStorage() {\n    _classCallCheck(this, LocalHostStorage);\n\n    this.localForage = new LocalForage();\n    window.addEventListener(\"storage\", this.handleStorageEvent);\n  } //call to clean\n\n\n  _createClass(LocalHostStorage, [{\n    key: \"close\",\n    value: function close() {\n      window.removeEventListener(\"storage\", this.handleStorageEvent);\n    }\n  }, {\n    key: \"handleStorageEvent\",\n    value: function handleStorageEvent(event) {\n      var key = event.key,\n          newValue = event.newValue; // TODO not implemented\n\n      console.warn(\"Handling storage updates is not implemented. It would be super fantastic to let subscribers know about changes.\");\n\n      if (event.key.startsWith(prefix)) {\n        var binderOpts = JSON.parse(key.slice(prefix.length));\n        console.log(binderOpts);\n        console.log(newValue);\n      }\n    }\n  }, {\n    key: \"createKey\",\n    value: function createKey(_ref2) {\n      var _ref2$repo = _ref2.repo,\n          repo = _ref2$repo === void 0 ? \"jupyter/notebook\" : _ref2$repo,\n          _ref2$ref = _ref2.ref,\n          ref = _ref2$ref === void 0 ? \"master\" : _ref2$ref,\n          _ref2$binderURL = _ref2.binderURL,\n          binderURL = _ref2$binderURL === void 0 ? myBinderURL : _ref2$binderURL;\n      return \"\".concat(prefix).concat(JSON.stringify({\n        repo: repo,\n        ref: ref,\n        binderURL: binderURL\n      }));\n    }\n  }, {\n    key: \"checkUp\",\n    value: function () {\n      var _checkUp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(host) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(host.type === GETTING_UP)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                return _context.abrupt(\"return\", kernels.list(host.config).pipe(map(function (xhr) {\n                  console.log(xhr);\n                  return true;\n                }), catchError(function (err) {\n                  console.error(\"error listing kernels on server\", err);\n                  return of(false);\n                })).toPromise());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function checkUp(_x) {\n        return _checkUp.apply(this, arguments);\n      }\n\n      return checkUp;\n    }()\n  }, {\n    key: \"allocate\",\n    value: function () {\n      var _allocate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(binderOpts) {\n        var original, isUp, host;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                original = this.get(binderOpts);\n\n                if (!(!original || !original.config)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                original = {\n                  type: \"isitup\"\n                };\n                this.set(binderOpts, original); // Fall through, don't return as we allocate below\n\n                _context2.next = 23;\n                break;\n\n              case 6:\n                if (!(original.type === UP)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 9;\n                return this.checkUp(original);\n\n              case 9:\n                isUp = _context2.sent;\n\n                if (!isUp) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", original.config);\n\n              case 12:\n                _context2.next = 23;\n                break;\n\n              case 14:\n                if (!(original.type === GETTING_UP)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n              case 15:\n                if (!(!original && original.type !== UP)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _context2.next = 18;\n                return sleep(1000);\n\n              case 18:\n                original = this.get(binderOpts);\n\n                if (!(original && original.type === UP)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", original.config);\n\n              case 21:\n                _context2.next = 15;\n                break;\n\n              case 23:\n                console.log(\"getting new host\");\n                _context2.next = 26;\n                return binder(binderOpts).pipe(tap(function (x) {\n                  console.log(x);\n                }), filter(function (msg) {\n                  return msg.phase === \"ready\";\n                }), map(function (msg) {\n                  return makeHost({\n                    endpoint: msg.url,\n                    token: msg.token\n                  });\n                })).toPromise();\n\n              case 26:\n                host = _context2.sent;\n\n                if (!(!host.config || !host.config.endpoint || !host.config.token || !host.config.crossDomain)) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                console.error(\"Error\", host);\n                throw new Error(\"Bad host created\");\n\n              case 30:\n                this.set(binderOpts, host);\n                console.log(\"allocated \", host);\n                return _context2.abrupt(\"return\", host.config);\n\n              case 33:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function allocate(_x2) {\n        return _allocate.apply(this, arguments);\n      }\n\n      return allocate;\n    }()\n  }, {\n    key: \"get\",\n    value: function get(opts) {\n      var key = this.createKey(opts);\n      return this.localForage.get(key);\n    }\n  }, {\n    key: \"set\",\n    value: function set(opts, host) {\n      var key = this.createKey(opts);\n      this.localForage.set(key, host);\n    }\n  }]);\n\n  return LocalHostStorage;\n}();","map":null,"metadata":{},"sourceType":"module"}