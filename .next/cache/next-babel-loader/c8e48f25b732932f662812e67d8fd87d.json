{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { UP, LocalHostStorage } from \"../lib/hostStorage.js\";\n\nconst {\n  binder\n} = require(\"rx-binder\");\n\nconst {\n  kernels\n} = require(\"rx-jupyter\");\n\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/React.createContext();\nexport { Consumer };\n\nclass Host extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"allocate\", () => {\n      const binderOpts = {\n        repo: this.props.repo,\n        ref: this.props.ref,\n        binderURL: this.props.binderURL\n      };\n      this.lhs.allocate(binderOpts).then(host => {\n        this.setState(host);\n      }).catch(e => {\n        console.error(\"allocation error\", e);\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.lhs = new LocalHostStorage();\n    this.allocate();\n  }\n\n  componentWillUnmount() {\n    this.lhs.close();\n  }\n\n  render() {\n    if (!this.props.children) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(Provider, {\n      value: this.state,\n      children: this.props.children\n    });\n  }\n\n}\n\n_defineProperty(Host, \"defaultProps\", {\n  repo: \"nteract/vdom\",\n  ref: \"master\",\n  binderURL: \"https://mybinder.org\"\n});\n\nexport default Host;","map":null,"metadata":{},"sourceType":"module"}